// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum CurrencyTypeType {
  IRT
  GBP
  AED
}

enum DateSystemType {
  JALALI
  GREGORIAN
}

model User {
  id                  String           @id @default(uuid())
  username            String?          @unique
  photo               String?
  email               String?          @unique
  name                String?
  family              String?
  countryCode         String?
  phone               String?
  password            String?
  telegramID          String?          @unique
  whatsappnumber      String?          @unique
  parcelShipments     Parcel[]
  flights             Flight[]
  currencyType        CurrencyTypeType @default(IRT)
  preferredDateSystem DateSystemType   @default(GREGORIAN)
  createdAt           DateTime         @default(now())

  @@unique([countryCode, phone])
  @@map(name: "users")
}

model Flight {
  id                          String   @id @default(uuid())
  departureDateTime           DateTime
  arrivalDateTime             DateTime
  acceptableParcelDescription String   @default("")
  estimatedCost               Float?
  userID                      String
  destinationCityId           String   @default("")
  destinationCity             City     @relation(fields: [destinationCityId], references: [id])
  user                        User     @relation(fields: [userID], references: [id])
  departureAirportId          String   @map("departureAirportId")
  destinationAirportId        String   @map("destinationAirportId")
  departureAirport            Airport  @relation("flightDepurtures", fields: [departureAirportId], references: [id])
  destinationAirport          Airport  @relation("flightDestinations", fields: [destinationAirportId], references: [id])

  @@map(name: "flights")
}

model Parcel {
  id                   String    @id @default(uuid())
  approximateDateTime  DateTime?
  immediateDelivery    Boolean   @default(true)
  parcelDescription    String
  parcelWeight         Float?
  parcelType           String?
  estimatedCost        Float?
  destinationCityId    String    @default("")
  destinationCity      City      @relation(fields: [destinationCityId], references: [id])
  userID               String
  departureAirportId   String    @map("departureAirportId")
  destinationAirportId String    @map("destinationAirportId")
  departureAirport     Airport   @relation("parcelShipmentDepurtures", fields: [departureAirportId], references: [id])
  destinationAirport   Airport   @relation("parcelShipmentDestinations", fields: [destinationAirportId], references: [id])
  User                 User      @relation(fields: [userID], references: [id])

  @@map(name: "CargoShipments")
}

model Country {
  id              String        @id @default(uuid())
  name            String
  iso3            String?       @unique
  iso2            String?       @unique
  numeric_code    String?
  phone_code      String?
  capital         String?
  currency        String?
  currency_name   String?
  currency_symbol String?
  tld             String?
  native          String?
  region          String?
  region_id       String?
  subregion       String?
  subregion_id    String?
  nationality     String?
  timezones       Timezone[]
  translationsId  String?       @unique
  translations    Translations? @relation("CountryTranslations", fields: [translationsId], references: [id])
  latitude        String?
  longitude       String?
  emoji           String?
  emojiU          String?
  cities          City[]
}

model City {
  id             String        @id @default(uuid())
  name           String
  countryId      String
  country        Country       @relation(fields: [countryId], references: [id])
  airports       Airport[]
  flights        Flight[]
  parcels        Parcel[]
  translationsId String?       @unique
  translations   Translations? @relation("CityTranslations", fields: [translationsId], references: [id])
}

model Airport {
  id                        String   @id @default(uuid())
  name                      String
  cityId                    String
  city                      City     @relation(fields: [cityId], references: [id])
  departureFlights          Flight[] @relation("flightDepurtures")
  destinationFlights        Flight[] @relation("flightDestinations")
  destinationCargoShipments Parcel[] @relation("parcelShipmentDestinations")
  departureCargoShipments   Parcel[] @relation("parcelShipmentDepurtures")
}

model Translations {
  id      String   @id @default(uuid())
  kr      String?
  pt_BR   String?
  pt      String?
  nl      String?
  hr      String?
  fa      String?
  ar      String?
  de      String?
  es      String?
  fr      String?
  ja      String?
  it      String?
  cn      String?
  tr      String?
  country Country? @relation("CountryTranslations")
  city    City?    @relation("CityTranslations")
}

model Timezone {
  id            String  @id @default(uuid())
  zoneName      String
  gmtOffset     Int
  gmtOffsetName String
  abbreviation  String
  tzName        String
  countryId     String
  country       Country @relation(fields: [countryId], references: [id])
}
